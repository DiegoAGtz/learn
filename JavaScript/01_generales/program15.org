#+TITLE: Arrays, other functions
#+AUTHOR: DiegoAGtz
#+DATE: <2022-02-15 mar.>

* every()
Devuelve true si todos los elementos del array cumplen con el predicado que recibe como parámetro

#+begin_src js
var esGrande = (elemento) => elemento > 10;
var a = [12, 5, 8, 130, 44].every(esGrande);
console.log(a);
var b = [12, 54, 18, 130, 44].every(esGrande);
console.log(b);
#+end_src

#+RESULTS:
: false
: true
: undefined

* fill()
Asigna un valor estático a todos los elementos del array entre ls posiciones inicio y fin. La posición final no se incluye.

#+begin_src js
console.log([1, 2, 3].fill(4));
console.log([1, 2, 3].fill(4, 1));
console.log([1, 2, 3, 5].fill(4, 1, 3));
#+end_src

* filter()
Devuelve un nuevo array que contiene todos los elementos del original para los que se cumple el predicado que se le pasa como parámetro.

#+begin_src js
var esGrande = (element) => element > 10;
var filtrados = [12, 4, 8, 130].filter(esGrande);
console.log(filtrados);
#+end_src

* find()
Devuelve el primer elemento del array que cumpla con el predicado que se le pasa como parámetro, o undefined si ninguno lo cumple.

#+begin_src js
const esPar = (n) => n%2 === 0
console.log([5, 4, 3, 10].find(esPar));
#+end_src

#+RESULTS:
: 4
: undefined

* findIndex()
Devuelve el indicador del primer elemento del array que cumpla con el predicado que se le pasa como parámetro, o -1 si ninguno lo cumple.

#+begin_src js
const esPar = (n) => n%2 === 0
console.log([5, 4, 3, 10].findIndex(esPar));
#+end_src

#+RESULTS:
: 1
: undefined

* includes()
Determina si el array contiene el valor buscado y devuelve true o false según sea cada caso

#+begin_src js
console.log([1, 2, 3].includes(2));
console.log([1, 2, 3].includes(4));
#+end_src

#+RESULTS:
: true
: false
: undefined

* indexOf()
Devuelve el indice del primer elemento del array que sea igual. al elemento buscado, o -1 si no existe.

#+begin_src js
console.log([1, 2, 3].indexOf(2));
console.log([1, 2, 3].indexOf(4));
#+end_src

#+RESULTS:
: 1
: -1
: undefined

* join()
Concatena en un string todos los elementos de un array.

#+begin_src js
const elementos = ['fuego', 'aire', 'tierra', 'agua'];
var s = elementos.join();
console.log(s);
s = elementos.join('')
console.log(s);
#+end_src

#+RESULTS:
: fuego,aire,tierra,agua
: fuegoairetierraagua
: undefined

* lastIndexOf()
Devuelve el índice del último elemento del array que sea igual al elemento buscado, o -1 si no existe

#+begin_src js
const animales = ['oso', 'tigre', 'pingüino', 'oso'];
console.log(animales.lastIndexOf('oso'));
console.log(animales.lastIndexOf('tigre'));
#+end_src

#+RESULTS:
: 3
: 1
: undefined

* reverse()
Invierte el orden de los elementos de un array (el primero pasa al ser el último y el último a ser el primero) en el propio array. Este método modifica el array.

#+begin_src js
const array1 = ['uno', 'dos', 'tres'];
console.log('array1: ', array1);
console.log('reversed: ', array1.reverse());
console.log('array1: ', array1);
#+end_src

#+RESULTS:
: array1:  [ 'uno', 'dos', 'tres' ]
: reversed:  [ 'tres', 'dos', 'uno' ]
: array1:  [ 'tres', 'dos', 'uno' ]
: undefined

* some()
Devuelve true si al menos un elemento del array cumple con el predicado que se pasa como parámetro.

#+begin_src js
var esPar = (item) => item%2 === 0;
const arr = [1, 2, 3, 4, 5];
console.log(arr.some(esPar));
#+end_src

#+RESULTS:
: true
: undefined

* sort()
Ordena los elementos de un array, modificando éste, y devuelve el array ordenado.

#+begin_src js
var frutas = ['toronjas', 'manzanas', 'bananas'];
console.log(frutas.sort());
#+end_src

Si no se provee compareFunction (una función de comparación), los elementos son ordenados convirtiéndolos a strings y comparando la posición del valor únicode de dichos strings.

#+begin_src js
var arr = ['80', '9', '700', 40, 1, 5, 200];
var comparar = (a,b) => a-b;
console.log('original: ', arr);
console.log('ordenado sin función: ', arr.sort());
console.log('ordenado con función: ', arr.sort(comparar));
#+end_src

#+RESULTS:
#+begin_example
original:  [
  '80', '9', '700',
  40,   1,   5,
  200
]
ordenado sin función:  [
  1,   200,   40,
  5,   '700', '80',
  '9'
]
ordenado con función:  [
  1,     5,    '9',
  40,    '80', 200,
  '700'
]
undefined
#+end_example

Si compareFunction(a, b) es menor que 0, se sitúa en un índice menor que b. Es decir, a viene primero.
Si compareFunction(a, b) retorna 0, se deja a y b sin cambios entre ellos, pero ordenados con respecto a los elementos diferentes.
Si compareFunction(a, b) es mayor que 0, se sitúa b en un indice menor que a.
