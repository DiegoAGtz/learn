#+TITLE: While and for
#+AUTHOR: DiegoAGtz
#+DATE: <2022-02-08 mar.>

* While
El ciclo while nos permite repetir un conjunto de instrucciones mientras una condición sea valida.

#+begin_src js
var n = 0;
var x = 0;
while (n < 3) {
    n++;
    x += n;
}
console.log(x);
#+end_src

#+RESULTS:
: 6
: undefined

** Continue
La directiva *continue* salta el código en el bloque hasta la iteración siguiente.

#+begin_src js
var n = 0;
var i = 0;
while (i < 5) {
    i++;
    if (i == 3) continue;
    console.log(i);
    n += i;
}
console.log(n);
#+end_src

#+RESULTS:
: 1
: 2
: 4
: 5
: 12
: undefined

** Break
La directiva break termina el ciclo.

#+begin_src js
var n = 0;
var i = 0;
while (i < 5) {
    i++;
    if (n == 3)
        break;
    console.log(i);
    n += i;
}
console.log(n);
#+end_src

#+RESULTS:
: 1
: 2
: 3
: undefined

* For
Nos permite iterar sobre un conjunto de instrucciones una cantidad de veces conocida, aunque también puede actuar como un while.

#+begin_src js
var n = 0;
for (var i = 0; i < 9; i++) {
    n += i;
    console.log(`Iteración ${i}, suma ${n}`);
}
#+end_src

#+RESULTS:
#+begin_example
Iteración 0, suma 0
Iteración 1, suma 1
Iteración 2, suma 3
Iteración 3, suma 6
Iteración 4, suma 10
Iteración 5, suma 15
Iteración 6, suma 21
Iteración 7, suma 28
Iteración 8, suma 36
undefined
#+end_example

** Continue

#+begin_src js
var n = 0;
for (var i = 0; i < 9; i++) {
    if (i == 4) continue;
    n += i;
    console.log(`Iteración ${i}, suma ${n}`);
}
#+end_src

#+RESULTS:
: Iteración 0, suma 0
: Iteración 1, suma 1
: Iteración 2, suma 3
: Iteración 3, suma 6
: Iteración 5, suma 11
: Iteración 6, suma 17
: Iteración 7, suma 24
: Iteración 8, suma 32
: undefined

** Break

#+begin_src js
var n = 0;
for (var i = 0; i < 9; i++) {
    if (i == 4) break;
    n += i;
    console.log(`Iteración ${i}, suma ${n}`);
}
#+end_src

#+RESULTS:
: Iteración 0, suma 0
: Iteración 1, suma 1
: Iteración 2, suma 3
: Iteración 3, suma 6
: undefined
